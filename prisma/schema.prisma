// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  podcasts      Podcast[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Podcast {
  id          String   @id @default(cuid())
  title       String
  description String?
  script      String
  audioUrl    String?
  videoUrl    String?
  avatarType  String   @default("none") // none, male, female, custom
  voiceType   String   @default("default") // default, male, female, custom
  status      String   @default("draft") // draft, processing, completed, failed
  duration    Int?     // in seconds
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  episodes    Episode[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Episode {
  id          String   @id @default(cuid())
  title       String
  description String?
  script      String
  audioUrl    String?
  videoUrl    String?
  order       Int      @default(0)
  duration    Int?     // in seconds
  status      String   @default("draft") // draft, processing, completed, failed
  podcastId   String
  podcast     Podcast  @relation(fields: [podcastId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   // interview, storytelling, educational, news, etc.
  script      String   // template script with placeholders
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}